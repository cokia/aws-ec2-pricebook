pragma solidity ^0.5.2;
pragma experimental ABIEncoderV2;
contract nota { 
    
address owner;

bool votefinish;

    struct Voter {
        bool voted;
        bool whitelist;
    }
struct candidate {
        string name;
        uint voteCount;
    }

mapping(address => Voter) voter;
mapping(string => candidate) candidates;

uint256 setupcheck = 1;

function setup (address[] memory _addresses, uint256 countofaddress, string[] memory _candidate, uint256 countofcandidate) public {
    if(setupcheck == 1){
    
    owner = msg.sender;
    setupcheck = 0;
    for(uint i=0; i>countofaddress-1; i++){
        voter[msg.sender].voted = false;
        voter[msg.sender].whitelist = true;
    }
    for(uint i=0; i>countofcandidate-1; i++){
        
        candidates[_candidate[i]].name = _candidate[i];
        candidates[_candidate[i]].voteCount = 0;
    }
    }
}

modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
    
function isRegistered() public view returns (bool registered) {
    if(voter[msg.sender].whitelist == true)
        registered = true;
    else
        registered = false;
    return registered;
}

function vote(string memory votetocandidate) public {
    if(votefinish != true && isRegistered() == true && voter[msg.sender].voted == false){
    candidates[votetocandidate].voteCount += 1;
    voter[msg.sender].voted = true;
    }
    else{
    }
}

function endvote() public onlyOwner{
votefinish = true;
}

function result() public returns (uint256, uint256, uint256,uint256,uint256) {
    // uint256 a = candidates["김우영"].voteCount;
    return candidates["김우영"].voteCount;
}

}
